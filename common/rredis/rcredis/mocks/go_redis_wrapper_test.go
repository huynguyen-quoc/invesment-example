// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	redis "github.com/go-redis/redis/v8"

	rredisapi "huynguyen-quoc/investment/common/rredis/rredisapi"
)

// goRedisWrapper is an autogenerated mock type for the goRedisWrapper type
type goRedisWrapper struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *goRedisWrapper) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *goRedisWrapper) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Pipeline provides a mock function with given fields:
func (_m *goRedisWrapper) Pipeline() redis.Pipeliner {
	ret := _m.Called()

	var r0 redis.Pipeliner
	if rf, ok := ret.Get(0).(func() redis.Pipeliner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redis.Pipeliner)
		}
	}

	return r0
}

// Process provides a mock function with given fields: ctx, cmd
func (_m *goRedisWrapper) Process(ctx context.Context, cmd redis.Cmder) (interface{}, error) {
	ret := _m.Called(ctx, cmd)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, redis.Cmder) interface{}); ok {
		r0 = rf(ctx, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, redis.Cmder) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: ctx, channel, message
func (_m *goRedisWrapper) Publish(ctx context.Context, channel string, message interface{}) (interface{}, error) {
	ret := _m.Called(ctx, channel, message)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) interface{}); ok {
		r0 = rf(ctx, channel, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, channel, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: ctx, bufferSize, channels
func (_m *goRedisWrapper) Subscribe(ctx context.Context, bufferSize int, channels ...string) (*rredisapi.SubscribeResponse, error) {
	_va := make([]interface{}, len(channels))
	for _i := range channels {
		_va[_i] = channels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, bufferSize)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rredisapi.SubscribeResponse
	if rf, ok := ret.Get(0).(func(context.Context, int, ...string) *rredisapi.SubscribeResponse); ok {
		r0 = rf(ctx, bufferSize, channels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rredisapi.SubscribeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, ...string) error); ok {
		r1 = rf(ctx, bufferSize, channels...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getResultFromCommands provides a mock function with given fields: cmd
func (_m *goRedisWrapper) getResultFromCommands(cmd []redis.Cmder) ([]rredisapi.ReplyPair, error) {
	ret := _m.Called(cmd)

	var r0 []rredisapi.ReplyPair
	if rf, ok := ret.Get(0).(func([]redis.Cmder) []rredisapi.ReplyPair); ok {
		r0 = rf(cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rredisapi.ReplyPair)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]redis.Cmder) error); ok {
		r1 = rf(cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
